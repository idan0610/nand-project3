// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    //use DMux8Way to chose which if the 4-RAM4K groups is relevant , using the
    //3bit address (the last 3 bits), a value will be loaded to register i only if the address
    // (all 14 bits) were pointing to i (the RAM4K will also DMux the address, and so on..).
    DMux4Way(in=load, sel=address[12..13], a=ram0, b=ram1, c=ram2, d=ram3);
    RAM4K(in=in, load=ram0, address=address[0..11], out=out0);
    RAM4K(in=in, load=ram1, address=address[0..11], out=out1);
    RAM4K(in=in, load=ram2, address=address[0..11], out=out2);
    RAM4K(in=in, load=ram3, address=address[0..11], out=out3);
    
    // Mux8Way16 to output the requested value
    Mux4Way16(a=out0,b=out1, c=out2, d=out3,sel=address[12..13],out=out);
}
